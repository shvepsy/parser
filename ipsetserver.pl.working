#!/usr/bin/env perl
use strict;
use Socket;
use POSIX qw(strftime);

# use port 4444 as default
my $port = shift || 4444;
my $proto = getprotobyname('tcp');
my $server = "10.0.4.54";
my $logpath = "/var/log/unban.log";
my $listpath = "/home/firewall/firewall.sh ipset";
my $delpath = "/home/firewall/firewall.sh ipsetdel";
# create a socket
socket(SOCKET, PF_INET, SOCK_STREAM, $proto)
 or die "Can't open socket $!\n";
setsockopt(SOCKET, SOL_SOCKET, SO_REUSEADDR, 1)
 or die "Can't set socket option to SO_REUSEADDR $!\n";

# bind to a port, then listen
bind(SOCKET, pack_sockaddr_in($port, inet_aton($server)))
 or die "Can't bind to port $port! \n";

listen(SOCKET, SOMAXCONN) or die "listen: $!";

open(LOG, ">>$logpath") or die "Cannot open $logpath: $!";

my $time = strftime "%e %b %H:%M:%S %Y", localtime;
print LOG "$time - Server started on port $port\n";
LOG->flush();
close STDOUT;
close STDERR;

# accepting a connection
my $client_addr;
while ($client_addr = accept(NEW_SOCKET, SOCKET))
{
   # receive data
   my ($clinet_port,$client_ipn) = sockaddr_in($client_addr);
   my $client_ip = inet_ntoa($client_ipn);
   my $data = <NEW_SOCKET>;
   my ($req_method, $req_ip) = split(" ", $data) ;

   # verification received data
   unless ($req_method eq "check"||$req_method eq "del")
   {
     print NEW_SOCKET "ERROR: Invalid method\n";
     close NEW_SOCKET;
     next;
   };
   unless ($req_ip=~/^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/ &&(($1<=255  && $2<=255 && $3<=255  &&$4<=255 )))
   {
    print NEW_SOCKET "ERROR: Invalid IP\n";
    close NEW_SOCKET;
    next;
    };
   unless ($client_ip=~/^10.*/)
   {
    print NEW_SOCKET "ERROR: Access denied\n";
    close NEW_SOCKET;
    next;
    };

   # execute
   if ($req_method eq "check" )
   {
     my (@ipset) = Check($req_ip);
     my ($table,@uniqp);
     while (@ipset)
     {
       $table = shift @ipset if $ipset[0] =~ /^\D+/ ;
       my $bndip = shift @ipset;
       my $time = strftime "%e %b %H:%M:%S %Y", localtime;
       foreach $a (@uniqp) {
        goto MARK if $a =~ /$bndip $table/ ;
       }
       push @uniqp, ("$bndip $table");
       print LOG "$time - $client_ip - $req_method $table $bndip\n";
       print NEW_SOCKET "$bndip exist in $table table.\n";
       MARK:
       next
     }
   }
   elsif ($req_method eq "del")
   {
     my ($del,@ipset) = Delete($req_ip,$client_ip,$req_method);
     if ($del != "")
     {
       print NEW_SOCKET "Unbanned!\n";
     }
     else
     {
       print NEW_SOCKET "ERROR: Deleting\n"
     };
    }
    else
    {
      print NEW_SOCKET "ERROR: Case\n"
    }
   close NEW_SOCKET;
   LOG->flush();
}
close LOG;

# func Check: getting ipset tablename and hash:ip,port,ip int @ipset for checking or deleting from table
sub Check
{
  my ($req_ip) = @_;
  my $cmd = "$listpath | egrep \'Name:|$req_ip\' | sed -e \'s| timeout.*||g\' -e \'s|Name: ||g\' | grep -P \'^\\\d\+\' -B 1 | grep -v \'^--\'";
  my @ipset = `$cmd`;
  if (!$ipset[1] or $ipset[1] !~ /$req_ip/ )
  {
    print NEW_SOCKET "Not banned.\n";
    close NEW_SOCKET;
    next
    }
  chomp(@ipset);
  return @ipset;
}

# func Delete: "ipset del <tablename> <hash>" from @ipset
sub Delete
{
  my ($req_ip,$client_ip,$req_method) = @_;
  my ($table,$del,@uniqd);
  my (@ipset) = Check($req_ip);
  while (@ipset)
  {
    $table = shift @ipset if $ipset[0] =~ /^\D+/;
    my $bndip = shift @ipset;
    unless ($table =~ /^BAN/) { print NEW_SOCKET "Can't delete from $table\n" ; $del = ""; goto MARK2 ; }  ;
    foreach $b (@uniqd) {
     goto MARK2 if $b =~ /$bndip $table/ ;
    }
    push @uniqd, ("$bndip $table");
    my $time = strftime "%e %b %H:%M:%S %Y", localtime;
    print LOG "$time - $client_ip - $req_method  $table $bndip\n";
    my $cmd = "$delpath $table $bndip";
    $del = `$cmd`;
    MARK2:
    next
  }
  return $del, @ipset;
}
